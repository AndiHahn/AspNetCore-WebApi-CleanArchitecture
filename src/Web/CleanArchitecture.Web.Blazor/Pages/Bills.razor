@page "/bills"
@attribute [Authorize]

@using CleanArchitecture.Core.Models
@using CleanArchitecture.Core.Interfaces.CrudServices
@using CleanArchitecture.Core.Models.Domain.Bill
@using CleanArchitecture.Application.Services
@using System.Security.Claims
@inject IBillService billService
@inject ICurrentUserService currentUserService

<h1>Bills</h1>

<p>A list of all your bills.</p>

@if (bills == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Shopname</th>
                <th>Price (€)</th>
                <th>Date</th>
                <th>Category</th>
                <th>Notes</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in bills)
            {
                <tr>
                    <td>@forecast.ShopName</td>
                    <td>@forecast.Price</td>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.Category</td>
                    <td>@forecast.Notes</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private BillModel[] bills;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authenticationState = await authenticationStateTask;

        var claimsPrincipal = authenticationState.User;

        var userIdClaim = claimsPrincipal.Claims?.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier);
        if (userIdClaim != null)
        {
            currentUserService.SetCurrentUserId(Guid.Parse(userIdClaim.Value));
        }

        var queryParameter = new BillQueryParameter()
        {
            PageSize = 10,
            PageIndex = 0
        };

        var result = await billService.QueryAsync(queryParameter);
        bills = result.Result.ToArray();
    }
}
