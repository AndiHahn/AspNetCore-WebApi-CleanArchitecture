// <auto-generated />
using System;
using CleanArchitecture.Infrastructure.Database.Budget;
using CleanArchitecture.Shopping.Infrastructure.Database.Budget;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CleanArchitecture.Infrastructure.Database.Budget.Migrations
{
    [DbContext(typeof(ShoppingDbContext))]
    [Migration("20211125205412_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CleanArchitecture.Core.BankAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("BankAccount");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Bill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BankAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ShopName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Bill");
                });

            modelBuilder.Entity("CleanArchitecture.Core.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("CleanArchitecture.Core.UserBankAccount", b =>
                {
                    b.Property<Guid>("BankAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BankAccountId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserBankAccount");
                });

            modelBuilder.Entity("CleanArchitecture.Core.UserBill", b =>
                {
                    b.Property<Guid>("BillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BillId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserBill");
                });

            modelBuilder.Entity("CleanArchitecture.Core.BankAccount", b =>
                {
                    b.HasOne("CleanArchitecture.Core.User", "Owner")
                        .WithMany("OwnedAccounts")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Bill", b =>
                {
                    b.HasOne("CleanArchitecture.Core.BankAccount", "BankAccount")
                        .WithMany("Bills")
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Core.User", "CreatedByUser")
                        .WithMany("CreatedBills")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BankAccount");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("CleanArchitecture.Core.UserBankAccount", b =>
                {
                    b.HasOne("CleanArchitecture.Core.BankAccount", "BankAccount")
                        .WithMany("SharedWithUsers")
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Core.User", "User")
                        .WithMany("SharedAccounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankAccount");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleanArchitecture.Core.UserBill", b =>
                {
                    b.HasOne("CleanArchitecture.Core.Bill", "Bill")
                        .WithMany("SharedWithUsers")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Core.User", "User")
                        .WithMany("SharedBills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleanArchitecture.Core.BankAccount", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("SharedWithUsers");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Bill", b =>
                {
                    b.Navigation("SharedWithUsers");
                });

            modelBuilder.Entity("CleanArchitecture.Core.User", b =>
                {
                    b.Navigation("CreatedBills");

                    b.Navigation("OwnedAccounts");

                    b.Navigation("SharedAccounts");

                    b.Navigation("SharedBills");
                });
#pragma warning restore 612, 618
        }
    }
}
